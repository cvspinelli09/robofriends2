{"version":3,"sources":["components/card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Clock.js","components/CounterButton.js","components/Header.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","console","log","map","user","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","Clock","date","Date","toLocaleTimeString","navigator","language","hour","minute","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a44fc2cc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img \n                src={`https://robohash.org/${id}?200x200`}\n                alt='robots' \n            />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nimport Card from \"./card\";\n\nconst CardList = ({ robots }) => {\n    console.log('CardList');\n    return (\n      <div>\n        {robots.map((user, id) => {\n            return (\n            <Card\n                key={id}\n                id={robots[id].id}\n                name={robots[id].name}\n                email={robots[id].email}\n            />\n            );\n        })}\n      </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    console.log('SearchBox');\n    return (\n      <div className='pa2'>\n        <input\n            className='pa3 ba b--green bg-lightest-blue' \n            type=\"search\" \n            placeholder=\"search robots\" \n            onChange={searchChange}\n        />\n      </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px' }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\n\nclass ErrorBoundry extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return  <h1>Deu Ruim Aqui!</h1>   \n        } \n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\n\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            date: new Date()\n        }\n    }\n\n    render() {\n        return (\n          <div>\n            <h3>\n              {\" \"}\n              {this.state.date.toLocaleTimeString(navigator.language, {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n              })}{\" \"}\n            </h3>\n          </div>\n        );\n    }\n}\n\nexport default Clock;","import React from 'react';\n\nclass CounterButton extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true\n        }\n        return false\n    }\n\n    updateCount = () => {\n        this.setState(state => { \n            return { count: state.count + 1 }\n        })\n    }\n\n\n    render() {\n        console.log('Header');\n        return (\n            <button color={this.props.color} onClick={this.updateCount} >Count: {this.state.count} </button>\n        )\n    }\n}\n\nexport default CounterButton;","import React from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n\n    render() {\n        console.log('Header');\n        return (\n            <div>\n                <h1>RobotFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        )\n    }\n}\n\nexport default Header;","import { apiCall } from './api/api';\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n\n\n","export const apiCall = link => \n    fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\n\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\n\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from \"../components/CardList\";\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Clock from '../components/Clock';\nimport Header from '../components/Header';\n\nimport { setSearchField, requestRobots } from '../actions'; \n\nif (process.env.NODE_ENV !== 'production') {\n  const { whyDidYouUpdate } = require('why-did-you-update');\n  whyDidYouUpdate(React);\n}\n\n\nclass App extends React.Component {\n    componentDidMount() {\n      this.props.onRequestRobots();\n    }\n\n    render() {\n      const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n          return robot.name\n            .toLowerCase()\n            .includes(searchField.toLowerCase());\n        });\n        return isPending ? \n        <h1>Loading</h1> :\n        (\n          <div className=\"tc\">\n            <Header />\n            <Clock />\n            <SearchBox searchChange={onSearchChange} />\n            <Scroll>\n              <ErrorBoundry>\n                <CardList robots={filteredRobots} />\n              </ErrorBoundry>\n            </Scroll>\n          </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { \n                ...state, \n                searchField: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                robots: action.payload,\n                isPending: false\n            }\n        case REQUEST_ROBOTS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                isPending: false\n            }\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = \n  createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}